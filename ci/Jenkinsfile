#!groovy
pipeline {
  agent {
    label 'linux'
  }

  environment {
    SERVICE_NAME = 'cennznet-js'
    GIT_NAME = 'Jenkins'
    GIT_EMAIL = 'jenkins@centrality.ai'
    IMAGE_NAME = "centrality/${SERVICE_NAME}-build:1.0.${BUILD_NUMBER}"
    PUBLISH_IMAGE_NAME = "centrality/${SERVICE_NAME}:1.0.${BUILD_NUMBER}"
    LAST_COMMIT_AUTHOR = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
  }

  stages {
    stage('Build') {
      environment {
        SSH_RSA_FILE_PATH = credentials('jenkins-ssh-key')
      }
      when {
        expression {env.GIT_NAME != env.LAST_COMMIT_AUTHOR}
      }
      steps {
        sh './ci/deployment/build.sh'
      }
    }

    stage('Unit Test') {
      when {
        expression {env.GIT_NAME != env.LAST_COMMIT_AUTHOR}
      }
      steps {
        sh './ci/pr/unit-test.sh'
      }
    }

    stage('Confirm Publish') {
      when {
        expression {env.GIT_NAME != env.LAST_COMMIT_AUTHOR}
      }
      steps {
        timeout(time:30, unit:'MINUTES') {
          input "Confirm publish?"
        }
      }
    }

    stage('Publish to Gemfury') {
      when {
        expression {env.GIT_NAME != env.LAST_COMMIT_AUTHOR}
      }
      input {
        id "releaseType"
        message "Choose release type"
        parameters { 
          choice(
            name: 'RELEASE_TYPE', 
            choices: ['major', 'minor', 'patch'], 
            description: ''
          ) 
        }
      }
      environment {
        GEMFURY_TOKEN = credentials('GEMFURY_TOKEN')
        RELEASE_TYPE="${RELEASE_TYPE}"
      }
      steps {
        sh './ci/deployment/publish.sh'
      }
    }
    
    stage('Publish Document') {
      when {
        expression {env.GIT_NAME != env.LAST_COMMIT_AUTHOR}
      }
      steps {
        echo 'Publish to Readthedoc'
      }
    }
  }
}